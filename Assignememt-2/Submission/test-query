-- what is remaining ---
--- -- translating quries from to ra
-- \i C:/Users/kiran/PycharmProjects/B561-ADC-IUB-Fall2021/Assignememt-2/Submission/assignment-2.sql

-- 1) c) -- working
select q.* from (select distinct p.pid , p.pname from person p, worksfor w where w.cname='Google' and w.pid=p.pid
Intersect
select distinct p1.pid , p1.pname from person p1, person p2, worksfor wf1, worksfor wf2, knows kn  where wf1.cname='Google' and wf1.pid=p1.pid and kn.pid1=p1.pid and kn.pid2=p2.pid and wf1.salary > wf2.salary and wf2.cname='Google') q;




-- problem 2
--> a)

with loweset_removed as(SELECT distinct c.cname, p.pid, p.pname, w.salary FROM company c, person p, worksfor w where c.headquarter='Cupertino' and not exists(select 1 from companylocation cl where cl.cname=c.cname and cl.city='Indianapolis') and p.pid=w.pid and w.cname=c.cname and exists (select 1 from worksfor wf where wf.cname=c.cname and wf.salary < w.salary)) select lr.* from loweset_removed lr where  not exists (select 1 from loweset_removed lr1 where lr1.cname=lr.cname and lr1.salary < lr.salary);


-- answer b - working copy
with emp_details as (
	SELECT distinct c.cname, p.pid, p.pname, w.salary FROM company c, person p, worksfor w where c.headquarter='Cupertino' and c.cname not in(select cl.cname from companylocation cl where cl.city='Indianapolis') and p.pid=w.pid and w.cname=c.cname),
lowest_removed as (
	select lr.* from emp_details lr where lr.pid not in ( 
	select ed.pid from emp_details ed where ed.salary<=all(select salary from emp_details))
) select ntl.* from lowest_removed ntl where ntl.pid in (
	select lr.pid from lowest_removed lr where lr.salary<=all(select salary from lowest_removed));
	
-- answer c -- working copy
with emp_details as (
	SELECT distinct c.cname, p.pid, p.pname, w.salary FROM company c, person p, worksfor w, companylocation cl where c.headquarter='Cupertino' and cl.city<>'Indianapolis' and cl.cname=c.cname and p.pid=w.pid and w.cname=c.cname),
lowest_removed as (
	select distinct ed1.* from emp_details ed1, emp_details ed2 where ed1.pid<>ed2.pid and (ed1.salary-ed2.salary) > 0
)select ntl.* from lowest_removed ntl  intersect 
select distinct ntl1.* from lowest_removed ntl1, lowest_removed ntl2 where ntl1.pid <>ntl2.pid and (ntl1.salary -ntl2.salary)=0 ;


--- as per profesoor
-- c)
with emp_details as (
	SELECT distinct c.cname, p.pid, p.pname, w.salary FROM company c, person p, worksfor w, companylocation cl where c.headquarter='Cupertino' and cl.city<>'Indianapolis' and cl.cname=c.cname and p.pid=w.pid and w.cname=c.cname),
lowest_removed as (
	select distinct ed1.* from emp_details ed1, emp_details ed2 where ed1.pid<>ed2.pid and (ed1.salary-ed2.salary) > 0
)select ntl.* from  
(select distinct ntl1.* from lowest_removed ntl1 intersect select  ntl1.* from  lowest_removed ntl1 , lowest_removed ntl2 where ntl1.pid <>ntl2.pid and (ntl1.salary -ntl2.salary)=0) ntl;


-- problem 3 -> a) -> working 
select wf.cname, wf.pid from worksfor wf where exists(
		select 1 from worksfor wf1, knows kn1 where wf1.cname=wf.cname and wf1.pid<>wf.pid and kn1.pid1=wf1.pid and kn1.pid2=wf.pid and not exists(
			select 1 from worksfor wf2, knows kn2 where wf2.cname=wf.cname and wf2.pid<>wf1.pid and wf2.pid<>wf.pid and kn2.pid1=wf2.pid and kn2.pid2<>wf.pid
		)
) or not exists( select 1 from worksfor wf3 where wf3.cname=wf.cname and wf3.pid<>wf.pid)

-- anser b) - working
select wf.cname, wf.pid from worksfor wf where wf.pid in (
		select kn1.pid2 from worksfor wf1, knows kn1 where wf1.cname=wf.cname and wf1.pid<>wf.pid and kn1.pid1=wf1.pid and kn1.pid2=wf.pid and wf.pid = All(
			select kn2.pid2 from worksfor wf2, knows kn2 where wf2.cname=wf.cname and wf2.pid<>wf1.pid and wf2.pid<>wf.pid and kn2.pid1=wf2.pid
		)
) or wf.pid= all( select wf3.pid from worksfor wf3 where wf3.cname=wf.cname)

-- answer c)-- working query
with same_company as (select distinct kn.pid1, kn.pid2, wf1.cname from knows kn, worksfor wf1, worksfor wf2 where wf1.cname=wf2.cname and wf1.pid=kn.pid1 and wf2.pid=kn.pid2), known_persons as (select distinct pid2, cname from same_company), single_person_in_company as (select distinct wf1.cname, wf1.pid from worksfor wf1 except  
	select distinct wf1.cname, wf1.pid from worksfor wf1, worksfor wf2 where 
	wf1.cname=wf2.cname and wf1.pid<>wf2.pid) select q.* from ((select ks.cname, ks.pid2  from known_persons ks except
select distinct ks.cname, ks.pid2 from same_company sc1, known_persons ks where sc1.cname=ks.cname and sc1.pid2<>ks.pid2) union select * from single_person_in_company) q;

-- test query

create view same_company as(
	select distinct kn.pid1, kn.pid2, wf1.cname from knows kn, worksfor wf1, worksfor wf2 where wf1.cname=wf2.cname and wf1.pid=kn.pid1 and wf2.pid=kn.pid2
);
create view known_persons as (
	select distinct pid2, cname from same_company
);	
create view single_person_in_company as (
	select distinct wf1.cname, wf1.pid from worksfor wf1 except  
	select distinct wf1.cname, wf1.pid from worksfor wf1, worksfor wf2 where 
	wf1.cname=wf2.cname and wf1.pid<>wf2.pid
);
select ks.cname, ks.pid2  from known_persons ks except
select distinct ks.cname, ks.pid2 from same_company sc1, known_persons ks where sc1.cname=ks.cname and sc1.pid2<>ks.pid2 union select * from single_person_in_company;
	
select * from same_company;
select * from known_persons;
select * from single_person_in_company;
drop view known_persons;
drop view same_company;
drop view single_person_in_company;

-- Problem 4
--> Working query ->(a)
with people_skill as (
select distinct ps.skill from personskill ps where exists(
select 1 from worksfor wf where (wf.cname='Yahoo' or wf.cname='Netflix') and wf.pid=ps.pid)
)
select s.skill from skill s where not exists ( select 1 from people_skill ps where ps.skill=s.skill)

--Working query -> (b) -->
with people_skill as (
select distinct ps.skill from personskill ps, worksfor wf where (wf.cname='Yahoo' or wf.cname='Netflix') and wf.pid=ps.pid
)
select s.* from (select s.skill from skill s except (
	select s.skill from skill s, people_skill ps where ps.skill=s.skill
)) s;


-- Problem 5

-- test function and query
drop function if exists testProblem5(com text, p int);
create function testProblem5(com text, p int)
returns table(pid integer, pname text, city text, cname text, salary integer) as
$$
	select per.*, wf.cname, wf.salary from person per, worksfor wf where wf.pid=per.pid and wf.cname=com and per.pid=p;
$$ language sql;

-- Insert values
INSERT INTO Person VALUES (1020, 'David', 'New York'),(1021, 'John', 'Bloomington');
INSERT INTO worksFor VALUES (1020, 'Google', 50000), (1021, 'Google', 5000);
INSERT INTO hasManager VALUES (1020, 1005),(1021, 1005);

INSERT INTO Person VALUES (1022, 'X', 'Vegas');
INSERT INTO worksFor VALUES (1022, 'Google', 50000);
INSERT INTO hasManager VALUES (1020, 1022),(1021, 1022);


Delete from worksFor wf where wf.pid in (1020, 1021, 1022) and wf.cname='Google';
delete from hasManager hm where (hm.eid=1020 and hm.mid=1005) or (hm.eid=1021 and hm.mid=1005);
delete from hasManager hm where (hm.eid=1020 and hm.mid=1022) or (hm.eid=1021 and hm.mid=1022);
Delete from person per where per.pid in (1020, 1021, 1022);

select * from testProblem5('Google', 1020);
select * from testProblem5('Google', 1021);
select * from testProblem5('Google', 1022);

-- actual query --
-- as per professor
select per.pid, per.pname from person per, worksfor wf where per.pid=wf.pid and wf.cname='Google'
where exists() and not exits()

-- as per me a) --> working copy
with worksfor_google as (
	select distinct hm.eid , hm.mid from hasmanager hm, worksfor wf where wf.cname='Google' and wf.pid=hm.eid and hm.mid in (select wfm.pid from worksfor wfm where wfm.cname='Google' and wfm.pid<>hm.eid) 
) select distinct per.pid, per.pname from person per, worksfor_google wfg where per.pid=wfg.mid and not exists(	select 1 from worksfor_google wfg2 where wfg2.eid<>wfg.eid and wfg2.mid<>wfg.mid)

-- as per me B) --> working copy
with worksfor_google as (
	select distinct hm.eid , hm.mid from hasmanager hm, worksfor wf, worksfor wfm where wf.cname='Google' and wf.pid=hm.eid and wfm.cname='Google' and wfm.pid=hm.mid
)
select q.* from (select distinct wf.mid as pid, pers.pname from person pers, worksfor_google wf where wf.mid=pers.pid  except select distinct wfg.mid, p.pname from  worksfor_google wfg, worksfor_google wfg2, person p where wfg2.eid<>wfg.eid and wfg2.mid<>wfg.mid and p.pid=wfg.mid) q


-- test query
create view worksfor_google as (select distinct hm.eid , hm.mid from hasmanager hm, worksfor wf, worksfor wfm where wf.cname='Google' and wf.pid=hm.eid and wfm.cname='Google' and wfm.pid=hm.mid);
drop view worksfor_google;



----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
------ RA -----
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------

-- problem 6
--> working query 
with works_for_google as (
	select p.pid, p.pname, wf.cname, wf.salary from worksfor wf join person p on (p.pid =wf.pid ) where wf.cname='Google'
), people_details as (
	select wg.*, kn.pid2 from works_for_google wg join knows kn on (kn.pid1=wg.pid)
) select distinct pd.pid, pd.pname from people_details pd join works_for_google wg on (pd.pid2=wg.pid) and pd.salary > wg.salary;

----> Test query
create view works_for_google as (
	select p.pid, p.pname, wf.cname, wf.salary from worksfor wf join person p on (p.pid =wf.pid ) where wf.cname='Google'
);
create view people_details as (
	select wg.*, kn.pid2 from works_for_google wg join knows kn on (kn.pid1=wg.pid)
);

select pd.pid, pd.pname from people_details pd join works_for_google wg on (pd.pid2=wg.pid) and pd.salary > wg.salary;

drop view people_details;
drop view works_for_google;


-- problem 7
--> working query 
with required_company as (select distinct c.cname from company c join companylocation cl on (cl.cname=c.cname) where c.headquarter='Cupertino' and cl.city<>'Indianapolis'), 
company_details as (
	select w.pid, w.salary, w.cname from worksfor w join required_company rc on (w.cname=rc.cname) 
),
personal_details as  (select cd.cname, p.pid, p.pname, cd.salary from person p join company_details cd on (cd.pid=p.pid)),
lowest_removed as (
	select distinct pd1.* from personal_details pd1 join personal_details pd2 on  (pd1.pid<>pd2.pid) and (pd1.salary-pd2.salary) > 0
) select distinct ntl1.* from lowest_removed ntl1 join lowest_removed ntl2 on(ntl1.pid <>ntl2.pid) and (ntl1.salary -ntl2.salary)=0 ;


-- Problem 8
-- working query
with same_company as (select distinct kn.pid1, kn.pid2, wf1.cname from worksfor wf1 join worksfor wf2 on (wf1.cname=wf2.cname) join knows kn on (wf1.pid=kn.pid1 and wf2.pid=kn.pid2)),
known_persons as (select distinct pid2, cname from same_company),
single_person_in_company as 
(select distinct wf1.cname, wf1.pid from worksfor wf1 except  
	select distinct wf1.cname, wf1.pid from worksfor wf1 join  worksfor wf2 on(
	wf1.cname=wf2.cname and wf1.pid<>wf2.pid))
select ks.cname, ks.pid2  from known_persons ks except
(select distinct ks.cname, ks.pid2 from same_company sc1 join known_persons ks on(sc1.cname=ks.cname and sc1.pid2<>ks.pid2) ) union select * from single_person_in_company;


-- problem 9
-- working query

with people_skill as (
select distinct ps.skill from personskill ps join worksfor wf on (wf.pid=ps.pid)  where (wf.cname='Yahoo' or wf.cname='Netflix')
)
select s.skill from skill s except (
	select s.skill from skill s join people_skill ps on (ps.skill=s.skill)
)


-- problem 10
 
with worksfor_google as (
	select distinct hm.eid , hm.mid from hasmanager hm join worksfor wf on (wf.pid=hm.eid) join worksfor wfm on (wfm.pid=hm.mid) where wf.cname='Google' and wfm.cname='Google'
)
select distinct wf.mid as pid, pers.pname from person pers join worksfor_google wf on(wf.mid=pers.pid)   except select distinct wfg.mid, p.pname from  worksfor_google wfg join worksfor_google wfg2 on (wfg2.eid<>wfg.eid and wfg2.mid<>wfg.mid) join person p on(p.pid=wfg.mid)


-- Problem 11


with e_details as(
select distinct hm.eid,hm.mid, wfe.salary, wfe.cname from hasmanager hm join worksfor wfe on (hm.eid=wfe.pid) join worksfor wfm on (hm.mid=wfm.pid) where wfm.cname=wfe.cname order by hm.eid), m_details as(
select distinct hm.mid, wfm.salary, wfm.cname from hasmanager hm join worksfor wfm on (hm.mid=wfm.pid) order by hm.mid)
select md.* from  m_details md where md.salary < all(select ed.salary from e_details ed where ed.cname=md.cname and md.mid=ed.mid)

-- test -- working
with e_details as(
select distinct hm.eid,hm.mid, wfe.salary, wfe.cname from hasmanager hm join worksfor wfe on (hm.eid=wfe.pid) join worksfor wfm on (hm.mid=wfm.pid) where wfm.cname=wfe.cname order by hm.eid), m_details as(
select distinct hm.mid, wfm.salary, wfm.cname from hasmanager hm join worksfor wfm on (hm.mid=wfm.pid) order by hm.mid)
select md.* from  m_details md except select md.* from  m_details md, e_details ed where ed.cname=md.cname and md.mid=ed.mid and not md.salary <ed.salary

-- Problem 12 -- remaining
create temp view wf_google as (select wf.pid from worksfor wf where wf.cname='Google');
create temp view knows_wfg as (select kn.* from knows kn,wf_google wfg where kn.pid2=wfg.pid);
create temp view knows_wfg_p1 as (select distinct pid1 from knows_wfg);
select * from knows_wfg_p1 order by pid1;
select * from knows_wfg order by pid1;
select * from knows_wfg_p1 p1 where not exists(select 1 from knows_wfg kg where kg.pid1=p1.pid1 and kg.pid2 not in (select * from wf_google))


select * from knows_wfg knwfg where exists(
	select 1 from knows_wfg knwfg1 where knwfg.pid1=knwfg1.pid1 and knwfg.pid2<>knwfg1.pid2
)

select kn.* from knows kn, wf_google wfg where kn.pid2=wfg.pid and not exists(select 1 from knows kn1, wf_google wfg1 where kn1.pid1=kn.pid1 and kn1.pid2<>kn.pid2 and  kn1.pid2=wfg1.pid) order by kn.pid1

or select * from wf_google wfg, knows kn where kn.pid2=wfg.pid and not exists(select * from wf_google wfg1, knows kn1 where kn1.pid2=wfg1.pid and kn1.pid1=kn.pid1)

select distinct kn.* from knows kn, wf_google wfg, knows kn1, wf_google wfg1  where kn.pid2=wfg.pid and kn1.pid1=kn.pid1 and kn1.pid2<>kn.pid2 and  kn1.pid2<>wfg1.pid order by kn.pid1

select kn.* from knows kn where kn.pid2 in (1005, 1011) order by kn.pid1;

-- Problem 13
select hm.eid from hasmanager hm where not exists(
	select 1 from knows kn where kn.pid1=hm.eid and kn.pid2=hm.mid
)
-- working -->
select q.* from (select hm.eid from hasmanager hm except select hm.eid from hasmanager hm, knows kn where kn.pid1=hm.eid and kn.pid2=hm.mid
) q

-- Problem 14

-- working
with e_details as (
select hm.*, wf.cname from hasmanager hm, worksfor wf where wf.pid = hm.eid)
select q.* from (
	select ed.eid, ed.mid from e_details as ed intersect
	select ed.eid, ed.mid from e_details ed, worksfor wf where wf.pid=ed.mid and wf.cname<>ed.cname
)q;





-- Problem 16 -- --> working 
create view triangle as(
with two_p as(select distinct p1.pid1, p1.pid2 from knows p1, knows p2 where p2.pid1=p1.pid2 and p2.pid2=p1.pid1), three_p as (select distinct tp.pid1,tp.pid2, p3.pid2 as pid3 from two_p tp, knows p3 where tp.pid2=p3.pid1 and tp.pid1<>p3.pid2 and exists (select 1 from knows ktest where ktest.pid1=p3.pid2 and ktest.pid2=tp.pid1))
	select distinct * from three_p tp where exists (select 1 from knows kn where kn.pid1=tp.pid1 and kn.pid2=tp.pid3) and exists(select 1 from knows kn where kn.pid1=tp.pid3 and kn.pid2=tp.pid2));

select pid1, pid2, pid3 from triangle;


-- problem 17 --> working
drop function if exists SalaryBelow(compname text, emp_salary integer);
create function SalaryBelow(compname text, emp_salary integer)
returns TABLE(pid integer, pname text, city text) as
$$
select per.* from person per, worksfor wf where wf.cname=compname and wf.salary < emp_salary and per.pid=wf.pid order by per.pid;
$$ language sql;

select * from SalaryBelow('IBM',60000);
select * from SalaryBelow('IBM',50000);
select * from SalaryBelow('Apple', 65000);


-- Problem 18 --> working 
drop function if exists KnowsPersonAtCompany(p integer, c text);
create function KnowsPersonAtCompany(p integer, c text)
returns TABLE(pid integer, pname text, city text) as
$$
	select per.* from person per where per.pid in (
		select kn.pid2 from knows kn where kn.pid1=p and exists(
			select 1 from worksfor wf where wf.pid=kn.pid2 and wf.cname=c
		)
	)
$$ language sql;
select * from KnowsPersonAtCompany(1001, 'Amazon');
select * from KnowsPersonAtCompany(1001,'Apple');
select * from KnowsPersonAtCompany(1015,'Netflix');


-- Problem 19 --> working 
drop function if exists KnownByPersonAtCompany(p integer, c text);
create function KnownByPersonAtCompany(p integer, c text)
returns TABLE(pid integer, pname text, city text) as
$$
	select per.* from person per where per.pid in (select kn.pid1 from knows kn where kn.pid2=p) and exists (select 1 from worksfor wf1 where wf1.pid=per.pid and wf1.cname=c)
$$ language sql;
select * from KnownByPersonAtCompany(1001, 'Amazon');
select * from KnownByPersonAtCompany(1001,'Apple');
select * from KnownByPersonAtCompany(1015,'Netflix');


-- Problem 20 
drop view  if exists sameGeneration;
CREATE RECURSIVE VIEW sameGeneration(n1, n2) as
(
	select t.parent, t.parent from tree as t
	union
	select t.child, t.child from tree as t
	union
	select t1.child, t2.child from tree t1, tree t2, sameGeneration sg where sg.n1=t1.parent and sg.n2=t2.parent
);
select * from sameGeneration order by n1;
